<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="1" tests="20" time="7.362" timestamp="2020-12-06T20:39:22.458385" hostname="b3e164b95bec"><testcase classname="tests.__init__" name="BLACK" file="tests/__init__.py" line="-1" time="0.854" /><testcase classname="tests.conftest" name="BLACK" file="tests/conftest.py" line="-1" time="0.660" /><testcase classname="tests.test_parsers" name="BLACK" file="tests/test_parsers.py" line="-1" time="0.801" /><testcase classname="tests.test_parsers.TestIndeedParser" name="test_full_url" file="tests/test_parsers.py" line="15" time="0.002" /><testcase classname="tests.test_parsers.TestIndeedParser" name="test_get_entries_count" file="tests/test_parsers.py" line="29" time="0.015" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_link" file="tests/test_parsers.py" line="60" time="0.005" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_page" file="tests/test_parsers.py" line="70" time="0.004" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_title" file="tests/test_parsers.py" line="80" time="0.018" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_company_name" file="tests/test_parsers.py" line="131" time="0.015"><failure message="AssertionError: assert &lt;MagicMock name='mock.text.strip()' id='140216546554160'&gt; == 'Aperture'&#10;  +&lt;MagicMock name='mock.text.strip()' id='140216546554160'&gt;&#10;  -'Aperture'">object_under_test_company_info = &lt;src.parsers.IndeedEntry object at 0x7f86b56f11f0&gt;

    @staticmethod
    def test_company_name(object_under_test_company_info: IndeedEntry):
        # === Arrange
        expected = "Aperture"
    
        # === Act
        actual = object_under_test_company_info.company_name
    
        # === Assert
&gt;       assert actual == expected
E       AssertionError: assert &lt;MagicMock name='mock.text.strip()' id='140216546554160'&gt; == 'Aperture'
E         +&lt;MagicMock name='mock.text.strip()' id='140216546554160'&gt;
E         -'Aperture'

tests/test_parsers.py:141: AssertionError</failure></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_location" file="tests/test_parsers.py" line="142" time="0.012" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_neighborhood[neighborhood]" file="tests/test_parsers.py" line="153" time="0.007"><failure message="TypeError: &lt;lambda&gt;() got an unexpected keyword argument 'name'">object_under_test_company_info = &lt;src.parsers.IndeedEntry object at 0x7f86b55a0fd0&gt;, ________step_name_ = 'neighborhood', request = &lt;FixtureRequest for &lt;Function test_neighborhood[neighborhood]&gt;&gt;

&gt;   ???

&lt;makefun-gen-4&gt;:2: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_steps/steps_generator.py:493: in wrapped_test_function
    steps_monitor.execute(step_name, args, kwargs)
/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_steps/steps_generator.py:299: in execute
    res = next(self.gen)
tests/test_parsers.py:162: in test_neighborhood
    actual_neighborhood = object_under_test_company_info.neighborhood
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.parsers.IndeedEntry object at 0x7f86b55a0fd0&gt;

    @property
    def neighborhood(self) -&gt; str:
        # Extract neighborhood info if it"s there
&gt;       neighborhood_info = self._company_location_info.find(name="span")
E       TypeError: &lt;lambda&gt;() got an unexpected keyword argument 'name'

src/parsers.py:68: TypeError</failure></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_neighborhood[updated_location]" file="tests/test_parsers.py" line="153" time="0.010"><skipped type="pytest.skip" message="This test step 'updated_location' is not run because non-optional previous step 'neighborhood' has failed">/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_steps/steps_generator.py:353: This test step 'updated_location' is not run because non-optional previous step 'neighborhood' has failed</skipped></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_salary" file="tests/test_parsers.py" line="171" time="0.005" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_no_salary" file="tests/test_parsers.py" line="191" time="0.003" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_summary" file="tests/test_parsers.py" line="207" time="0.009" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_description" file="tests/test_parsers.py" line="227" time="1.017" /><testcase classname="tests.test_run" name="BLACK" file="tests/test_run.py" line="-1" time="0.679" /><testcase classname="tests.test_run.TestProjectContext" name="test_project_name" file="tests/test_run.py" line="54" time="0.710" /><testcase classname="tests.test_run.TestProjectContext" name="test_project_version" file="tests/test_run.py" line="57" time="0.078" /><testcase classname="tests.pipelines.__init__" name="BLACK" file="tests/pipelines/__init__.py" line="-1" time="0.723" /></testsuite></testsuites>