<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="22" time="10.181" timestamp="2020-12-13T18:13:35.802471" hostname="49f5edb8d3e1"><testcase classname="tests.__init__" name="BLACK" file="tests/__init__.py" line="-1" time="1.039" /><testcase classname="tests.conftest" name="BLACK" file="tests/conftest.py" line="-1" time="0.590" /><testcase classname="tests.test_parsers" name="BLACK" file="tests/test_parsers.py" line="-1" time="0.801" /><testcase classname="tests.test_parsers.TestIndeedParser" name="test_full_url" file="tests/test_parsers.py" line="16" time="0.002" /><testcase classname="tests.test_parsers.TestIndeedParser" name="test_get_entries_count" file="tests/test_parsers.py" line="30" time="0.007" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_link" file="tests/test_parsers.py" line="61" time="0.004" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_page" file="tests/test_parsers.py" line="71" time="0.004" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_title" file="tests/test_parsers.py" line="81" time="0.007" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_company_name" file="tests/test_parsers.py" line="136" time="0.007" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_location" file="tests/test_parsers.py" line="147" time="0.006" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_neighborhood[neighborhood]" file="tests/test_parsers.py" line="158" time="0.017" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_neighborhood[updated_location]" file="tests/test_parsers.py" line="158" time="0.010" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_salary" file="tests/test_parsers.py" line="176" time="0.005" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_no_salary" file="tests/test_parsers.py" line="196" time="0.003" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_summary" file="tests/test_parsers.py" line="212" time="0.004" /><testcase classname="tests.test_parsers.TestIndeedEntry" name="test_job_description" file="tests/test_parsers.py" line="232" time="1.014" /><testcase classname="tests.test_run" name="BLACK" file="tests/test_run.py" line="-1" time="0.626" /><testcase classname="tests.test_run.TestProjectContext" name="test_project_name" file="tests/test_run.py" line="54" time="0.096" /><testcase classname="tests.test_run.TestProjectContext" name="test_project_version" file="tests/test_run.py" line="57" time="0.064" /><testcase classname="tests.pipelines.__init__" name="BLACK" file="tests/pipelines/__init__.py" line="-1" time="0.593" /><testcase classname="tests.pipelines.data_engineering.test_nodes" name="BLACK" file="tests/pipelines/data_engineering/test_nodes.py" line="-1" time="0.621" /><testcase classname="tests.pipelines.data_engineering.test_nodes.TestGetJobPostings" name="test_typical" file="tests/pipelines/data_engineering/test_nodes.py" line="5" time="1.830"><failure message="AssertionError: Expected 'IndeedParser' to have been called once. Called 0 times.">__wrapped_mock_method__ = &lt;function NonCallableMock.assert_called_once at 0x7f3c2f0b4430&gt;, args = (&lt;MagicMock name='IndeedParser' id='139896387208816'&gt;,), kwargs = {}, __tracebackhide__ = True
msg = "Expected 'IndeedParser' to have been called once. Called 0 times.", __mock_self = &lt;MagicMock name='IndeedParser' id='139896387208816'&gt;

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -&gt; None:
        __tracebackhide__ = True
        try:
&gt;           __wrapped_mock_method__(*args, **kwargs)

/.pyenv/versions/3.8.0/lib/python3.8/site-packages/pytest_mock/plugin.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MagicMock name='IndeedParser' id='139896387208816'&gt;

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'IndeedParser' to have been called once. Called 0 times.

/.pyenv/versions/3.8.0/lib/python3.8/unittest/mock.py:886: AssertionError

During handling of the above exception, another exception occurred:

mocker = &lt;pytest_mock.plugin.MockerFixture object at 0x7f3be5c85b80&gt;

    @staticmethod
    def test_typical(mocker):
        # === Arrange
        expected = pd.DataFrame()
        query_to_test = "Data Scientist"
        locations_to_test = ["Boston, MA", "New York", "Europe"]
        mocked_indeed = mocker.MagicMock()
        mocked_indeed.get_entries = 10 * ["hi"]
        mocked_parser = mocker.patch(
            "src.parsers.IndeedParser", return_value=mocked_indeed
        )
        mocked_entry = mocker.MagicMock()
        mocked_entry.link = "some_link"
        mocker.patch("src.parsers.IndeedEntry", return_value=mocked_entry)
    
        # === Act
        actual = get_job_postings(
            job_query=query_to_test, locations=locations_to_test, entries_per_location=1
        )
    
        # === Assert
&gt;       mocked_parser.assert_called_once()
E       AssertionError: Expected 'IndeedParser' to have been called once. Called 0 times.

tests/pipelines/data_engineering/test_nodes.py:27: AssertionError</failure></testcase></testsuite></testsuites>