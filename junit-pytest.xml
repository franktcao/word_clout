<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="0947297387fa" name="pytest" skipped="0" tests="56" time="16.657" timestamp="2021-04-25T04:05:32.006220"><testcase classname="tests.__init__" file="tests/__init__.py" line="-1" name="BLACK" time="0.442"></testcase><testcase classname="tests.conftest" file="tests/conftest.py" line="-1" name="BLACK" time="0.325"></testcase><testcase classname="tests.test_parsers" file="tests/test_parsers.py" line="-1" name="BLACK" time="0.411"></testcase><testcase classname="tests.test_parsers.TestIndeedParser" file="tests/test_parsers.py" line="15" name="test_full_url" time="0.002"></testcase><testcase classname="tests.test_parsers.TestIndeedParser" file="tests/test_parsers.py" line="29" name="test_get_entries_count" time="0.071"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="60" name="test_link" time="0.003"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="70" name="test_job_page" time="0.004"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="80" name="test_job_title" time="0.005"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="130" name="test_company_name" time="0.005"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="141" name="test_location" time="0.009"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="152" name="test_salary" time="0.006"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="172" name="test_no_salary" time="0.002"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="188" name="test_job_summary" time="0.004"></testcase><testcase classname="tests.test_parsers.TestIndeedEntry" file="tests/test_parsers.py" line="208" name="test_job_description" time="1.018"></testcase><testcase classname="tests.test_run" file="tests/test_run.py" line="-1" name="BLACK" time="0.356"></testcase><testcase classname="tests.test_run.TestProjectContext" file="tests/test_run.py" line="54" name="test_project_name" time="0.080"></testcase><testcase classname="tests.test_run.TestProjectContext" file="tests/test_run.py" line="57" name="test_project_version" time="0.054"></testcase><testcase classname="tests.pipelines.__init__" file="tests/pipelines/__init__.py" line="-1" name="BLACK" time="0.330"></testcase><testcase classname="tests.pipelines.data_engineering.__init__" file="tests/pipelines/data_engineering/__init__.py" line="-1" name="BLACK" time="0.329"></testcase><testcase classname="tests.pipelines.data_engineering.test_nodes" file="tests/pipelines/data_engineering/test_nodes.py" line="-1" name="BLACK" time="0.366"></testcase><testcase classname="tests.pipelines.data_engineering.test_nodes.TestGetJobPostings" file="tests/pipelines/data_engineering/test_nodes.py" line="7" name="test_typical" time="0.135"></testcase><testcase classname="tests.pipelines.data_science.__init__" file="tests/pipelines/data_science/__init__.py" line="-1" name="BLACK" time="0.322"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf" file="tests/pipelines/data_science/test_append_tfidf.py" line="-1" name="BLACK" time="0.417"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetTermFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="11" name="test_different_methods_pass_through[standard]" time="0.017"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetTermFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="11" name="test_different_methods_pass_through[smooth]" time="0.015"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetTermFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="11" name="test_different_methods_pass_through[max]" time="0.018"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetTermFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="11" name="test_different_methods_pass_through[prob]" time="0.012"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetTermFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="86" name="test_bad_method" time="0.004"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetInverseDocumentFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="95" name="test_rescale_methods[None]" time="0.002"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetInverseDocumentFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="95" name="test_rescale_methods[log]" time="0.015"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetInverseDocumentFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="123" name="test_bad_method" time="0.003"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetDocumentFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="132" name="test_method_logic[standard]" time="0.014"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetDocumentFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="132" name="test_method_logic[log_norm]" time="0.017"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetDocumentFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="132" name="test_method_logic[double_k_norm]" time="0.023"></testcase><testcase classname="tests.pipelines.data_science.test_append_tfidf.TestGetDocumentFrequency" file="tests/pipelines/data_science/test_append_tfidf.py" line="200" name="test_bad_method" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes" file="tests/pipelines/data_science/test_nodes.py" line="-1" name="BLACK" time="0.462"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestExpandSalary" file="tests/pipelines/data_science/test_nodes.py" line="11" name="test_typical" time="0.036"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestExpandSalary" file="tests/pipelines/data_science/test_nodes.py" line="40" name="test_salary_has_none" time="0.035"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseSalary" file="tests/pipelines/data_science/test_nodes.py" line="72" name="test_typical_yearly" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseSalary" file="tests/pipelines/data_science/test_nodes.py" line="85" name="test_typical_hourly" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseSalary" file="tests/pipelines/data_science/test_nodes.py" line="98" name="test_single_value_yearly" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseSalary" file="tests/pipelines/data_science/test_nodes.py" line="111" name="test_single_value_hourly" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestExpandLocation" file="tests/pipelines/data_science/test_nodes.py" line="127" name="test_typical" time="0.030"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseLocation" file="tests/pipelines/data_science/test_nodes.py" line="154" name="test_typical" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseLocation" file="tests/pipelines/data_science/test_nodes.py" line="167" name="test_no_neighborhood" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseLocation" file="tests/pipelines/data_science/test_nodes.py" line="180" name="test_no_zip_code" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseLocation" file="tests/pipelines/data_science/test_nodes.py" line="193" name="test_only_city_state" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_nodes.TestParseLocation" file="tests/pipelines/data_science/test_nodes.py" line="206" name="test_neighborhood_first" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_parse_description" file="tests/pipelines/data_science/test_parse_description.py" line="-1" name="BLACK" time="0.419"></testcase><testcase classname="tests.pipelines.data_science.test_parse_description.TestConvertDescriptionStats" file="tests/pipelines/data_science/test_parse_description.py" line="17" name="test_simple_case" time="0.014"></testcase><testcase classname="tests.pipelines.data_science.test_parse_description.TestExtractDescriptionStats" file="tests/pipelines/data_science/test_parse_description.py" line="43" name="test_table_constructed_and_saved_as_expected" time="0.025"><failure message="AssertionError: Calls not found.
Expected: [call(&apos;corpus_id&apos;, 1), call(&apos;corpus_id&apos;, 2)]">mocker = &lt;pytest_mock.plugin.MockFixture object at 0x7fbc390cd9d0&gt;, tmp_path = PosixPath(&apos;/tmp/pytest-of-root/pytest-0/test_table_constructed_and_sav0&apos;)

    @staticmethod
    def test_table_constructed_and_saved_as_expected(mocker, tmp_path):
        &quot;&quot;&quot;Assert description stats table is constructed and saved as expected.&quot;&quot;&quot;
        # === Arrange
        data_to_test = pd.DataFrame(
            {
                &quot;link&quot;: [1, 2],
                &quot;description&quot;: [&quot;some description&quot;, &quot;some other description&quot;],
            }
        )
        mocked_clean_description = mocker.patch(
            &quot;src.pipelines.data_science.parse_description.clean_description&quot;,
            side_effect=lambda x: x,
        )
        mocked_returned_df = mocker.MagicMock()
        mocked_count_terms = mocker.patch(
            &quot;src.pipelines.data_science.parse_description.count_terms&quot;,
            side_effect=lambda text: mocked_returned_df,
        )
    
        # === Act
        write_term_counts_to_parquet(data=data_to_test, output_directory=tmp_path)
    
        # === Assert
        # Assert intermediate functions are called as expected
        mocked_clean_description.assert_has_calls(
            [call(&quot;some description&quot;), call(&quot;some other description&quot;)]
        )
        # Because this is called with kwargs, only the last call can be checked against
        mocked_count_terms.assert_called_with(text=&quot;some other description&quot;)
    
        # Assert the corpus ID is recorded for every row
&gt;       mocked_returned_df.__setitem__.assert_has_calls(
            [call(&quot;corpus_id&quot;, 1), call(&quot;corpus_id&quot;, 2)]
        )
E       AssertionError: Calls not found.
E       Expected: [call(&apos;corpus_id&apos;, 1), call(&apos;corpus_id&apos;, 2)]

tests/pipelines/data_science/test_parse_description.py:76: AssertionError</failure></testcase><testcase classname="tests.pipelines.data_science.test_parse_description.TestCountTerms" file="tests/pipelines/data_science/test_parse_description.py" line="86" name="test_typical_case" time="0.008"></testcase><testcase classname="tests.pipelines.data_science.test_parse_description.TestCleanDescription" file="tests/pipelines/data_science/test_parse_description.py" line="105" name="test_typical_case" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_parse_description.TestCleanDescription" file="tests/pipelines/data_science/test_parse_description.py" line="118" name="test_lower_cased" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_parse_description.TestCleanDescription" file="tests/pipelines/data_science/test_parse_description.py" line="131" name="test_remove_escape_chars" time="0.001"></testcase><testcase classname="tests.pipelines.data_science.test_parse_description.TestAppendDocumentAppearances" file="tests/pipelines/data_science/test_parse_description.py" line="146" name="test_appending_document_appearances_column" time="5.441"></testcase></testsuite></testsuites>